name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      image_name: ${{ steps.set_env.outputs.image_name }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up Docker Image Name
        id: set_env
        run: |
          REPO_NAME=$(echo $GITHUB_REPOSITORY | cut -d'/' -f2)
          IMAGE_NAME=$(echo $REPO_NAME | tr '[:upper:]' '[:lower:]')
          echo "image_name=$IMAGE_NAME" >> $GITHUB_OUTPUT          

  get-and-set-version:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.semver.outputs.nextStrict }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
  
      - name: Get Next Version
        id: semver
        uses: ietf-tools/semver-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: main
  
      - name: Output New Version
        run: echo "new_version=${{ steps.semver.outputs.next_version }}" >> $GITHUB_ENV
          
          

  linter:
    runs-on: ubuntu-latest
    needs: get-and-set-version
    steps:
      - uses: actions/checkout@v3
      - name: Run Hadolint
        uses: hadolint/hadolint-action@v1.5.0
        with:
          dockerfile: Dockerfile

  build-and-publish:
    runs-on: ubuntu-latest
    needs: [get-and-set-version, linter, prepare]
    steps:
      - uses: actions/checkout@v3

      - name: Build Docker Image
        run: docker build . --file Dockerfile --tag ${{ needs.prepare.outputs.image_name }}:${{ needs.get-and-set-version.outputs.new_version }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ needs.prepare.outputs.image_name }}:${{ needs.get-and-set-version.outputs.new_version }}'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL'

      - name: Push to Docker Registry
        run: |
          echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
          docker tag ${{ needs.prepare.outputs.image_name }}:${{ needs.get-and-set-version.outputs.new_version }} xavimf87/${{ needs.prepare.outputs.image_name }}:${{ needs.get-and-set-version.outputs.new_version }}
          docker push xavimf87/${{ needs.prepare.outputs.image_name }}:${{ needs.get-and-set-version.outputs.new_version }}

  create-tag-and-release:
    needs: [get-and-set-version, build-and-publish]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
  
      - name: Set up Git Config
        env:
          CI_USER: ${{ secrets.CI_USER }}
          CI_EMAIL: ${{ secrets.CI_EMAIL }}
        run: |
          git config --global user.name "$CI_USER"
          git config --global user.email "$CI_EMAIL"

      - name: Create and Push Tag
        run: |
          VERSION=${{ needs.get-and-set-version.outputs.new_version }}
          git tag $VERSION
          git push origin $VERSION 
          
      - name: Update CHANGELOG
        id: changelog
        uses: requarks/changelog-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ needs.get-and-set-version.outputs.new_version }}   
          
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: CHANGELOG.md
          title: Release ${{ needs.get-and-set-version.outputs.new_version }}
          tag_name: ${{ needs.get-and-set-version.outputs.new_version }}
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Commit CHANGELOG.md
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          branch: main
          commit_message: 'docs: update CHANGELOG.md for ${{ needs.get-and-set-version.outputs.new_version }} [skip ci]'
          file_pattern: CHANGELOG.md          
  